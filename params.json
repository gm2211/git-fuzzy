{"name":"git-fuzzy","tagline":"Makes Git a little fuzzier.","body":"# git-fuzzy\r\n\r\nMakes Git a little fuzzier.\r\n\r\n_by [Josh Dick](http://joshdick.net)_\r\n\r\n## Install It\r\n\r\n    npm install -g git-fuzzy\r\n\r\n## Use It\r\n\r\nInstalling `git-fuzzy` should have made it available on your `$PATH`.\r\n\r\n`git-fuzzy` is a wrapper for Git at the command line. Use Git just like you normally would, except prefix your Git arguments with \"fuzzy\".\r\n\r\nIf the last argument looks like a filename, `git-fuzzy` will attempt to fuzzy match it to the name of a file that has been modified in the working directory of your Git repository. Otherwise, `git-fuzzy` will just pass your Git arguments through to Git, unmodified.\r\n\r\nFor example:\r\n\r\n    > git status\r\n    # On branch master\r\n    # Changes not staged for commit:\r\n    #   (use \"git add <file>...\" to update what will be committed)\r\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n    #\r\n    #\tmodified:   another/very/long/path/myawesomefile.ext\r\n    #\tmodified:   some/really/long/path/anotherfile.ext\r\n    #\r\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n\r\n    > git fuzzy add awesome\r\n\r\n    > git status\r\n    # On branch master\r\n    # Changes to be committed:\r\n    #   (use \"git reset HEAD <file>...\" to unstage)\r\n    #\r\n    #\tmodified:   another/very/long/path/myawesomefile.ext\r\n    #\r\n    # Changes not staged for commit:\r\n    #   (use \"git add <file>...\" to update what will be committed)\r\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n    #\r\n    # modified:   some/really/long/path/anotherfile.ext\r\n    #\r\n\r\nTypical uses of `git-fuzzy` include things like:\r\n\r\n    > git fuzzy add somefile\r\n\r\n    > git fuzzy reset HEAD somefile\r\n\r\n    > git fuzzy checkout somefile\r\n\r\n## To Do\r\n\r\n* Attempt to fuzzy-match against [tree-ish](https://www.kernel.org/pub/software/scm/git/docs/)es in addition to filenames.\r\n* Attempt to fuzzy-match against all files in the repository, instead of just those that were modified in the working directory.\r\n* Attempt to fuzzy-match exact paths, since `git-fuzzy` treats these as ambiguous.\r\n* Attempt to fuzzy-match against multiple arguments, or at least arguments other than the last one.\r\n\r\n## Disclaimer\r\n\r\nI take no responsibility if `git-fuzzy` does unexpected or destructive things to your computer or Git repository. Use it at your own risk. It Works For Meâ„¢.\r\n\r\n## License\r\n\r\n`git-fuzzy` is copyright (c) Joshua Dick, and is licensed under the [MIT license](http://opensource.org/licenses/MIT). `git-fuzzy` depends on [`fuzzy`](https://github.com/mattyork/fuzzy), which is released under the same license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}